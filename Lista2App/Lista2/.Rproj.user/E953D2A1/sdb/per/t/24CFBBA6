{
    "collab_server" : "",
    "contents" : "library(ggplot2)\nlibrary(shiny)\nsource(\"funcoes.R\")\n\n# Define server logic required to draw a histogram\nshinyServer(function(input, output,session) {\n        \n  v <- reactiveValues(data = NULL)              \n \n  #Eventos  \n   observeEvent(input$calcProp,{\n           v$data <- sprintf(\"p^ = %.3f\", input$k/input$nProp)\n   })\n\n   observeEvent(input$calcMed,{\n           v$data <- sprintf(\"μ^ = %.3f\", input$mu)\n   })\n  \n  observeEvent(input$limpProp, {\n          v$data <- NULL\n   })\n  \n  observeEvent(input$limpMed, {\n          v$data <- NULL\n  })\n  \n  observeEvent(input$calcVar, {\n          v$data <- sprintf(\"sigma^ = %.3f\",\n                            ((input$nVar-1)/input$nVar)*(input$sd^2))\n  })\n  \n  observeEvent(input$limpVar, {\n          v$data <- NULL\n  })\n  \n\n  \n  #Saídas\n  output$resProp <- renderText({\n      if (is.null(v$data)) return()\n      v$data\n  })\n  \n  output$resMed <- renderText({\n          if (is.null(v$data))  return()\n          v$data\n  })\n \n  output$resVar <- renderText({\n          if (is.null(v$data)) return()\n          v$data\n  })\n  \n  output$nCurva <- renderPlot({\n          resultado <- normalCurve(xbarra = input$xNorm, variancia = input$s2Norm\n                                   ,n = input$nNorm, ic = input$nIC)\n          x <- c(-3,3)\n          y <- dnorm(x)\n          \n          alfa <- (100 - input$nIC)/100\n          \n          lInf <- resultado[1]\n          lSup <- resultado[2]\n          \n          zinf <- qnorm(alfa/2)\n          zsup <- qnorm(1-alfa/2)\n          \n          xy <- data.frame(x = x, y = y)\n          \n          g <- ggplot(data = data.frame(x), aes(x=x))\n          \n          g <- g + stat_function(fun = dnorm, n = 10000, args = list(mean = 0, sd = 1))\n          \n          \n          g <- g + geom_segment(data = xy, aes(x = zinf, y = 0, xend = zinf, yend = dnorm(zinf)))\n          \n          g <- g + geom_label(aes(x=zinf,y=0), label = toString(round(lInf,2)))\n          \n          g <- g + geom_label(aes(x=zsup,y=0), label = toString(round(lSup,2)))\n          \n          \n          g <- g + geom_segment(data = xy, aes(x = zsup, y = 0, xend = zsup, yend = dnorm(zsup)))\n          \n          g <- g + scale_y_continuous(breaks = NULL) + ylab(\"\") + \n                  scale_x_continuous(breaks = NULL) + xlab(paste(\"IC\", \n                                                                 toString(percent((1-alfa)))))\n          \n          g <- g + stat_function(fun= dnorm, n = 10000, args = list(0,1),\n                                 geom = \"area\", xlim = c(zinf,zsup), fill = \"red\", alpha = 0.5)\n          g\n          \n  })\n  \n  output$tsCurva <- renderPlot({\n          resultado <- tsCurve(xbarra = input$xTStud, variancia = input$s2TStud,\n                               n = input$nTStud,ic = input$tIC)\n          gl <- input$nTStud - 1 \n          x <- c(-3,3)\n          y <- qt(pt(x,df=gl), df = gl)\n          \n          alfa <- (100 - input$tIC)/100\n          \n          lInf <- resultado[1]\n          lSup <- resultado[2]\n          \n          tInf <- qt(alfa/2,df = gl)\n          tSup <- qt(1-alfa/2,df = gl)\n          \n          xy <- data.frame(x = x, y = y)\n          \n          g <- ggplot(data = data.frame(x), aes(x=x))\n          \n          g <- g + stat_function(fun = dt, args = list(df = gl))\n          \n          \n          g <- g + geom_segment(data = xy, aes(x = tInf, y = 0, xend = tInf, yend = dt(x = tInf, df = gl)))\n          \n          g <- g + geom_label(aes(x=tInf,y=0), label = toString(round(lInf,2)))\n          \n          g <- g + geom_label(aes(x=tSup,y=0), label = toString(round(lSup,2)))\n          \n          \n          g <- g + geom_segment(data = xy, aes(x = tSup, y = 0, xend = tSup, yend = dt(x = tSup,\n                                                                                       df = gl)))\n          \n          g <- g + scale_y_continuous(breaks = NULL) + ylab(\"\") + \n                  scale_x_continuous(breaks = NULL) + xlab(paste(\"IC\", \n                                                                 toString(percent((1-alfa)))))\n          \n          g <- g + stat_function(fun= dt, args = list(df = gl),\n                                 geom = \"area\", xlim = c(tInf,tSup), fill = \"blue\", alpha = 0.5)\n          g\n  })\n  \n  output$quiCurva <- renderPlot({\n          resultado <- quiCurve(variancia = input$s2Qui,n = input$nQui, ic = input$quiIC)\n          \n          alfa <- (100 - input$quiIC)/100\n          \n          gl <- input$nQui - 1\n          \n          lInf <- resultado[1]\n          lSup <- resultado[2]\n          \n          quiInf <- qchisq(1-(alfa/2),df = gl)\n          quiSup <- qchisq((alfa/2),df = gl)\n          \n          x = c(0,30)\n          \n          g <- ggplot(data = data.frame(x), aes(x=x))\n          \n          g <- g + stat_function(fun = dchisq, args = list(df = gl)) \n          \n          \n          g <- g + geom_segment(data = data.frame(x), aes(x = quiInf, y = 0, xend = quiInf, yend = dchisq(x = quiInf, df = gl)))\n          \n          g <- g + geom_label(aes(x=quiInf,y=0), label = toString(round(lSup,2)))\n          \n          g <- g + geom_label(aes(x=quiSup,y=0), label = toString(round(lInf,2)))\n          \n          \n          g <- g + geom_segment(data = data.frame(x), aes(x = quiSup, y = 0, xend = quiSup, yend = dchisq(x = quiSup,\n                                                                                       df = gl)))\n          \n          g <- g + scale_y_continuous(breaks = NULL) + ylab(\"\") + \n                  scale_x_continuous(breaks = NULL) + xlab(paste(\"IC\", \n                                                                 toString(percent((1-alfa)))))\n          \n          g <- g + stat_function(fun= dchisq, args = list(df = gl),\n                                 geom = \"area\", xlim = c(quiInf,quiSup), fill = \"green\", alpha = 0.5)\n          g\n  })\n  \n  output$fCurva <- renderPlot({\n          resultado <- fCurve(n1 = input$n1F,s1 = input$s21F, n2 = input$n2F, s2 = input$s22F, ic = input$fIC)\n          \n          alfa <- (100 - input$fIC)/100\n          \n          lSup <- resultado[2]\n          lInf <- resultado[1]\n          \n          gl1 <- input$n1F - 1\n          gl2 <- input$n2F - 1\n          \n          fInf <- qf(1-(alfa/2),df1 = gl1, df2 = gl2)\n          fSup <- qf((alfa/2), df1 = gl1, df2 = gl2)\n          \n          x = c(0,4)\n          \n          g <- ggplot(data = data.frame(x), aes(x=x))\n          \n          g <- g + stat_function(fun = df, args = list(df1 = gl1, df2 = gl2)) \n          \n          \n          g <- g + geom_segment(data = data.frame(x), aes(x = fInf, y = 0, xend = fInf, \n                                                          yend = df(x = fInf, df1 = gl1, df2 = gl2)))\n          \n          g <- g + geom_label(aes(x=fInf,y=0), label = toString(round(lSup,2)))\n          \n          \n          g <- g + geom_segment(data = data.frame(x), aes(x = fSup, y = 0, xend = fSup, \n                                                          yend = df(x = fSup, df1 = gl1, df2 = gl2)))\n          \n          g <- g + geom_label(aes(x=fSup,y=0), label = toString(round(lInf,2)))\n          \n          g <- g + scale_y_continuous(breaks = NULL) + ylab(\"\") + \n                  scale_x_continuous(breaks = NULL) + xlab(paste(\"IC\", \n                                                                 toString(percent((1-alfa)))))\n          \n          g <- g + stat_function(fun= df, args = list(df1 = gl1, df2 = gl2),\n                                 geom = \"area\", xlim = c(fInf,fSup), fill = \"yellow\", alpha = 0.7)\n          g\n  })\n  \n})\n",
    "created" : 1506341523621.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "769577002",
    "id" : "24CFBBA6",
    "lastKnownWriteTime" : 1507622612,
    "last_content_update" : 1507622612022,
    "path" : "~/Dropbox/UFRN/2017.2/TOPICOS/Lista2/Lista2App/Lista2/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}